/**  Lowest Common Ancestor in a BINARY SEARCH TREE  **/

Node* LCA(Node *root, int n1, int n2)
{
   if(root==NULL) return NULL;
   while(root){
       if(root->data > n1 && root->data > n2){
           root=root->left;
       }
       else if(root->data < n1 && root->data < n2){
           root=root->right;
       }
       else break;
   }
   return root;
}

/**  Lowest Common Ancestor in a BINARY TREE  **/

Node *LCA(Node* root ,int n1 ,int n2)
{
   if(root==NULL) return NULL;
   
   if(root->data == n1 || root->data == n2) return root;
   
   Node* LLca = LCA(root->left,n1,n2);
   Node* RLca = LCA(root->right,n1,n2);
   
   if(LLca && RLca) return root;
   
   if(LLca) return LLca;
   else return RLca;
}

/** Determine if Two Trees are Identical  **/

bool isIdentical(Node *r1, Node *r2)
{
    if(!r1 && !r2) return 1;
    else if(r1 && r2){
        return ((r1->data == r2->data) && (isIdentical(r1->left,r2->left)) && isIdentical(r1->right,r2->right));
    }
    return 0;
}

/** Convert Binary tree to its Mirror tree **/

void mirror(Node* node) 
{
    if(!node) return;
    else{
        Node *t;
        
        mirror(node->left);
        mirror(node->right);
        
        t = node->left;
        node->left = node->right;
        node->right = t;
    }
    
    
}
